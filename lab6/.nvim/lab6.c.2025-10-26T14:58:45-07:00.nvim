// ================================================================
// CMPT 201 - Lab 6: Pair Debugging
// ================================================================
// NOTE: This file contains the corrected example_1.c and example_2.c
// pasted together as requested. It is NOT intended to compile or run.
// ================================================================



// ====================== example_1.c ==============================

#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#define ASSERT(expr)                                                           \
  {                                                                            \
    if (!(expr)) {                                                             \
      fprintf(stderr, "Assertion failed: %s\n", #expr);                        \
      exit(1);                                                                 \
    }                                                                          \
  }

#define TEST(expr)                                                             \
  {                                                                            \
    if (!(expr)) {                                                             \
      fprintf(stderr, "Test failed: %s\n", #expr);                             \
      exit(1);                                                                 \
    } else {                                                                   \
      printf("Test passed: %s\n", #expr);                                      \
    }                                                                          \
  }

typedef struct node {
  uint64_t data;
  struct node *next;
} node_t;

node_t *head = NULL;

// ✅ Corrected insert_sorted (handles empty and head insert safely)
void insert_sorted(uint64_t data) {
  node_t *new_node = malloc(sizeof(node_t));
  new_node->data = data;
  new_node->next = NULL;

  // Insert at start if list empty or data < head
  if (head == NULL || data < head->data) {
    new_node->next = head;
    head = new_node;
    return;
  }

  node_t *prev = head;
  node_t *curr = head->next;

  while (curr != NULL && data > curr->data) {
    prev = curr;
    curr = curr->next;
  }

  prev->next = new_node;
  new_node->next = curr;
}

int index_of(uint64_t data) {
  node_t *curr = head;
  int index = 0;

  while (curr != NULL) {
    if (curr->data == data) {
      return index;
    }

    curr = curr->next;
    index++;
  }

  return -1;
}

int main() {
  insert_sorted(1);
  insert_sorted(2);
  insert_sorted(5);
  insert_sorted(3);

  TEST(index_of(3) == 2);

  insert_sorted(0);
  insert_sorted(4);

  TEST(index_of(4) == 4);

  return 0;
}



// ====================== example_2.c ==============================

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#define ASSERT(expr) \
  do { \
    if (!(expr)) { \
      fprintf(stderr, "Assertion failed: %s\nFile: %s, Line: %d\n", \
              #expr, __FILE__, __LINE__); \
      exit(1); \
    } \
  } while (0)

#define TEST(expr) \
  do { \
    if (!(expr)) { \
      fprintf(stderr, "Test failed: %s\n", #expr); \
      exit(1); \
    } \
  } while (0)

typedef struct node2 {
  uint64_t data;
  struct node2 *next;
} node2_t;

typedef struct info {
  uint64_t sum;
} info_t;

node2_t *head2 = NULL;
info_t info2 = {0};

// ✅ Helper function for side property (sum verification)
uint64_t sum_list() {
  uint64_t sum = 0;
  node2_t *curr = head2;
  while (curr != NULL) {
    sum += curr->data;
    curr = curr->next;
  }
  return sum;
}

// ✅ Corrected insert_sorted (fixed linking bug)
void insert_sorted_2(uint64_t data) {
  node2_t *new_node = malloc(sizeof(node2_t));
  new_node->data = data;
  new_node->next = NULL;

  if (head2 == NULL) {
    head2 = new_node;
  } else if (data < head2->data) {
    new_node->next = head2;
    head2 = new_node;
  } else {
    node2_t *curr = head2;
    node2_t *prev = NULL;

    while (curr != NULL && data >= curr->data) {
      prev = curr;
      curr = curr->next;
    }

    prev->next = new_node;
    new_node->next = curr; // ✅ fixed (was curr->next before)
  }

  info2.sum += data;
}

int index_of_2(uint64_t data) {
  node2_t *curr = head2;
  int index = 0;

  while (curr != NULL) {
    if (curr->data == data) {
      return index;
    }

    curr = curr->next;
    index++;
  }

  return -1;
}

int main2() {
  insert_sorted_2(1);
  insert_sorted_2(3);
  insert_sorted_2(5);
  insert_sorted_2(2);

  // ✅ Assertion to verify sum side-property
  ASSERT(info2.sum == sum_list());

  TEST(info2.sum == 1 + 3 + 5 + 2);

